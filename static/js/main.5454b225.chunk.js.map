{"version":3,"sources":["components/ValidateMessage.js","components/TrainingAddForm.js","model/TrainingModel.js","components/TrainingsList.js","components/TrainingHistory.js","App.js","index.js"],"names":["ValidateMessage","props","msg","className","TrainingAddForm","valueForm","useState","date","distance","validateErr","setValidateErr","handleChange","evt","target","name","value","prevValidateErr","onFormChangre","checkValue","regexpDate","match","onChange","onBlur","type","onClick","preventDefault","numberDistance","parseFloat","strKilometr","replace","onFormSubmit","kilometr","TrainingModel","id","this","TrainingsList","data","Fragment","map","o","key","objValue","onRemove","TrainingHistory","trainings","setTrainings","form","setForm","sortTrainings","sort","a","b","moment","prevForm","prevTrainings","itemTraining","training","shortid","generate","changeTrainings","findItem","findIndex","item","push","trainingsAddChange","filter","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5454b225.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function ValidateMessage(props) {\n  const { msg } = props;\n\n  return (\n    <div className=\"validate\">\n      <p>{msg}</p>\n    </div>\n  );\n}\n\nValidateMessage.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ValidateMessage from './ValidateMessage';\n\nexport default function TrainingAddForm(props) {\n  const { valueForm } = props;\n  const [validateErr, setValidateErr] = useState({\n    date: false,\n    distance: false,\n  });\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setValidateErr((prevValidateErr) => ({ ...prevValidateErr, [name]: false }));\n    props.onFormChangre({ name, value });\n  };\n  const checkValue = (evt) => {\n    const { name, value } = evt.target;\n    let regexpDate;\n\n    if (name === 'date') {\n      regexpDate = /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.\\d\\d$/;\n    } else if (name === 'distance') {\n      regexpDate = /^\\d+([.]\\d+)?(км)?$/g;\n    }\n\n    if (!value.match(regexpDate)) {\n      setValidateErr((prevValidateErr) => ({ ...prevValidateErr, [name]: true }));\n    }\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (valueForm.date && valueForm.distance) {\n      if (!validateErr.date && !validateErr.distance) {\n        const numberDistance = parseFloat(valueForm.distance);\n        const strKilometr = valueForm.distance.replace(numberDistance, '');\n\n        props.onFormSubmit({\n          date: valueForm.date,\n          distance: numberDistance,\n          kilometr: strKilometr,\n        });\n      }\n    }\n  };\n\n  return (\n    <form className=\"form-add\">\n      <label>Дата (ДД.ММ.ГГ)\n        <input name=\"date\" value={valueForm.date} onChange={handleChange} onBlur={checkValue} />\n        {validateErr.date && <ValidateMessage msg={'Введите дату корректно'} />}\n      </label>\n      <label>Пройдено км\n        <input name=\"distance\" value={valueForm.distance} onChange={handleChange} onBlur={checkValue}/>\n        {validateErr.distance && <ValidateMessage msg={'Введите дистанцию корректно'} />}\n      </label>\n      <input type=\"button\" value=\"OK\" onClick={handleSubmit} />\n    </form>\n  );\n}\n\nTrainingAddForm.propTypes = {\n  valueForm: PropTypes.object.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n  onFormChangre: PropTypes.func.isRequired,\n};\n","export default class TrainingModel {\n  constructor(id, date, distance, kilometr = '') {\n    this.id = id;\n    this.date = date;\n    this.distance = distance;\n    this.kilometr = kilometr;\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TrainingModel from '../model/TrainingModel';\n\nexport default function TrainingsList(props) {\n  const { data } = props;\n\n  const onRemove = (id) => {\n    props.onRemove(id);\n  };\n\n  const onChange = (objValue) => {\n    props.onChange(objValue);\n  };\n\n  return (\n    <React.Fragment>\n      {data.map((o) => (\n        <tr key={o.id}>\n          <td>{o.date}</td>\n          <td>{o.distance}{o.kilometr}</td>\n          <td>\n            <span className=\"change\" onClick={() => onChange({\n              id: o.id,\n              date: o.date,\n              distance: o.distance,\n              kilometr: o.kilometr,\n            })}> </span>\n            <span className=\"remove\" onClick={() => onRemove(o.id)}>✘</span>\n          </td>\n        </tr>\n      ))}\n    </React.Fragment>\n  );\n}\n\nTrainingsList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(TrainingModel)).isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport shortid from 'shortid';\nimport TrainingAddForm from './TrainingAddForm';\n// import TrainingsAddChange from './TrainingsAddChange';\nimport TrainingsList from './TrainingsList';\nimport TrainingModel from '../model/TrainingModel';\n\nexport default function TrainingHistory() {\n  const [trainings, setTrainings] = useState([]);\n  const [form, setForm] = useState({\n    id: '',\n    date: '',\n    distance: '',\n  });\n\n  const sortTrainings = trainings.sort((a, b) => moment(b.date, 'DD.MM.YY') - moment(a.date, 'DD.MM.YY'));\n\n  const trainingsAddChange = (trainings, training) => {\n    const changeTrainings = trainings;\n    const findItem = changeTrainings.findIndex((item) => item.date === training.date);\n\n    if (findItem === -1) {\n      changeTrainings.push(training);\n      return changeTrainings;\n    }\n  \n    changeTrainings[findItem].distance += training.distance;\n    changeTrainings[findItem].kilometr = changeTrainings[findItem].kilometr || training.kilometr;\n  \n    return changeTrainings;\n  }\n\n  const handleFormChange = (objValue) => {\n    const { name, value } = objValue;\n    setForm((prevForm) => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleFormSubmit = (objValue) => {\n    const { date, distance, kilometr } = objValue;\n\n    if (!form.id) {\n      const training = new TrainingModel(shortid.generate(), date, distance, kilometr);\n\n      setTrainings([...trainingsAddChange(trainings, training)]);\n    } else {\n      setTrainings((prevTrainings) => prevTrainings.map((itemTraining) => {\n        if (itemTraining.id === form.id) {\n          return new TrainingModel(form.id, date, distance, kilometr);\n        }\n        return itemTraining;\n      }));\n    }\n\n    setForm({\n      id: '',\n      date: '',\n      distance: '',\n    });\n  };\n\n  const handleRemove = (id) => {\n    setTrainings((prevTrainings) => prevTrainings.filter((o) => o.id !== id));\n  };\n\n  const handleChange = (objValue) => {\n    setForm({\n      id: objValue.id,\n      date: objValue.date,\n      distance: `${objValue.distance}${objValue.kilometr}`,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <TrainingAddForm\n        valueForm={form}\n        onFormChangre={handleFormChange}\n        onFormSubmit={handleFormSubmit}\n      />\n      <table>\n        <thead>\n          <tr>\n            <td>Дата (ДД.ММ.ГГ)</td>\n            <td>Пройдено км</td>\n            <td>Действия</td>\n          </tr>\n        </thead>\n        <tbody>\n          <TrainingsList data={sortTrainings} onRemove={handleRemove} onChange={handleChange} />\n        </tbody>\n      </table>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport TrainingHistory from './components/TrainingHistory';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <TrainingHistory />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}